#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ EUR/USD
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –º–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
"""

import os
import sys
import glob
from liquidity_analyzer import LiquidityAnalyzer
from batch_analyzer import BatchLiquidityAnalyzer

def show_main_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("\n" + "="*70)
    print("üî¨ –ê–ù–ê–õ–ò–ó –õ–ò–ö–í–ò–î–ù–û–°–¢–ò EUR/USD –ü–û –¢–û–†–ì–û–í–´–ú –°–ï–°–°–ò–Ø–ú")
    print("="*70)
    print()
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print()
    print("1Ô∏è‚É£  –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)")
    print("2Ô∏è‚É£  –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–∞–ø–∫–∞ files/)")
    print("3Ô∏è‚É£  –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–ø–æ–∫")
    print("4Ô∏è‚É£  –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    print("0Ô∏è‚É£  –í—ã—Ö–æ–¥")
    print()
    print("="*70)

def show_folder_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–ø–æ–∫ files/ –∏ results/"""
    print("\nüìÅ –°–¢–ê–¢–£–° –ü–ê–ü–û–ö:")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É files/
    files_dir = "files"
    results_dir = "results"
    
    if os.path.exists(files_dir):
        files_list = []
        for ext in ['*.csv', '*.xlsx', '*.CSV', '*.XLSX']:
            files_list.extend(glob.glob(os.path.join(files_dir, ext)))
        
        print(f"üìÇ –ü–∞–ø–∫–∞ {files_dir}/: {'‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if os.path.exists(files_dir) else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        if files_list:
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {len(files_list)}")
            for i, file_path in enumerate(files_list[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"      {i}. {os.path.basename(file_path)}")
            if len(files_list) > 5:
                print(f"      ... –∏ –µ—â–µ {len(files_list) - 5} —Ñ–∞–π–ª–æ–≤")
        else:
            print("   üì≠ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"üìÇ –ü–∞–ø–∫–∞ {files_dir}/: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É results/
    print(f"\nüìÇ –ü–∞–ø–∫–∞ {results_dir}/: {'‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if os.path.exists(results_dir) else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    if os.path.exists(results_dir):
        results_files = glob.glob(os.path.join(results_dir, "*.xlsx"))
        if results_files:
            print(f"   üìà –§–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results_files)}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ñ–∞–π–ª–∞
            recent_files = sorted(results_files, key=os.path.getmtime, reverse=True)[:3]
            for i, file_path in enumerate(recent_files, 1):
                mtime = os.path.getmtime(file_path)
                from datetime import datetime
                time_str = datetime.fromtimestamp(mtime).strftime('%Y-%m-%d %H:%M')
                print(f"      {i}. {os.path.basename(file_path)} ({time_str})")
        else:
            print("   üì≠ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    print("\nüìñ –°–ü–†–ê–í–ö–ê –ò –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
    print("="*70)
    
    print("\nüîß –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•:")
    print("   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: CSV, XLSX")
    print("   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: Date, Time, Open, High, Low, Close, Volume")
    print("   ‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: YYYY.MM.DD")
    print("   ‚Ä¢ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: HH:MM")
    print("   ‚Ä¢ –ß–∞—Å–æ–≤–∞—è –∑–æ–Ω–∞: UTC+0 (–±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ UTC+3)")
    print("   ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: M1 (1-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏)")
    
    print("\nüìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–ê–ü–û–ö:")
    print("   files/     - –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Å—é–¥–∞ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("   results/   - –∑–¥–µ—Å—å –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    print("\nüéØ –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:")
    print("   1. –û–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞, –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    print("   2. –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ files/")
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("   ‚Ä¢ Excel —Ñ–∞–π–ª —Å –¥–≤—É–º—è –ª–∏—Å—Ç–∞–º–∏: Analysis_Results –∏ Statistics")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ—Å—Å–∏—è–º: –ê–∑–∏—è, –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç, –õ–æ–Ω–¥–æ–Ω, –ù—å—é-–ô–æ—Ä–∫")
    print("   ‚Ä¢ Sweep –∞–Ω–∞–ª–∏–∑, Rebalance, Extensions, PDH/PDL –∏ –¥—Ä.")
    
    print("\nüí° –°–û–í–ï–¢–´:")
    print("   ‚Ä¢ –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
    print("   ‚Ä¢ –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: EURUSD)")
    print("   ‚Ä¢ –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç")

def run_single_file_analysis():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –û–î–ù–û–ì–û –§–ê–ô–õ–ê")
    print("-" * 30)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    while True:
        file_path = input("\nüìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–∏–ª–∏ 'q' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é): ").strip()
        
        if file_path.lower() == 'q':
            return
        
        if not file_path:
            print("‚ùå –ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            continue
        
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
        
        if not (file_path.lower().endswith('.csv') or file_path.lower().endswith('.xlsx')):
            print("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã CSV –∏ XLSX")
            continue
        
        break
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    while True:
        output_path = input("\nüíæ –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (Enter –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ): ").strip()
        
        if not output_path:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            base_name = os.path.splitext(os.path.basename(file_path))[0]
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = f"{base_name}_analysis_{timestamp}.xlsx"
            print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
            break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        output_dir = os.path.dirname(output_path)
        if output_dir and not os.path.exists(output_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {output_dir}")
            continue
        
        break
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    try:
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
        analyzer = LiquidityAnalyzer()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = analyzer.load_data(file_path)
        if df is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        results = analyzer.analyze_data(df)
        if results is None or len(results) == 0:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        analyzer.save_results(results, output_path)
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–Ω–µ–π: {len(results)}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
        if sys.platform == "darwin":  # macOS
            os.system(f"open '{output_path}'")
        elif sys.platform == "win32":  # Windows
            os.system(f'start "" "{output_path}"')
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

def run_batch_analysis():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    print("\nüî¨ –ú–ê–°–°–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í")
    print("-" * 30)
    
    batch_analyzer = BatchLiquidityAnalyzer()
    batch_analyzer.process_all_files()
    
    input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–µ–Ω—é"""
    
    while True:
        show_main_menu()
        
        try:
            choice = input("–í–∞—à –≤—ã–±–æ—Ä (0-4): ").strip()
            
            if choice == "0":
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            elif choice == "1":
                run_single_file_analysis()
            
            elif choice == "2":
                run_batch_analysis()
            
            elif choice == "3":
                show_folder_status()
                input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
            elif choice == "4":
                show_help()
                input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
        except KeyboardInterrupt:
            print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()
