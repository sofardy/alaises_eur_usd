#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
"""

import os
import sys
import pandas as pd
from datetime import datetime
from config import Config
from validator import validate_input_file

def print_header():
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É"""
    print("\n" + "="*60)
    print("üöÄ –ê–ù–ê–õ–Ü–ó–ê–¢–û–† –õ–Ü–ö–í–Ü–î–ù–û–°–¢–Ü EUR/USD")
    print("   –¢–æ—Ä–≥–æ–≤—ñ —Å–µ—Å—ñ—ó: –ê–∑—ñ—è, –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç, –õ–æ–Ω–¥–æ–Ω, –ù—å—é-–ô–æ—Ä–∫")
    print("="*60)

def print_menu():
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –º–µ–Ω—é"""
    print("\nüìã –ú–ï–ù–Æ:")
    print("1. üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
    print("2. ‚ö° –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É")
    print("3. üìä –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
    print("4. üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("5. üóÇÔ∏è  –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤")
    print("6. ‚öôÔ∏è  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    print("0. üö™ –í–∏—Ö—ñ–¥")
    print("-" * 30)

def validate_data():
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö"""
    print("\nüîç –í–ê–õ–Ü–î–ê–¶–Ü–Ø –î–ê–ù–ò–•")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª –¥–∞–Ω–∏—Ö
    if not os.path.exists(Config.DEFAULT_INPUT_FILE):
        print(f"‚ùå –§–∞–π–ª {Config.DEFAULT_INPUT_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    return validate_input_file(Config.DEFAULT_INPUT_FILE)

def run_analysis():
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É"""
    print("\n‚ö° –ó–ê–ü–£–°–ö –ê–ù–ê–õ–Ü–ó–£")
    
    if not os.path.exists(Config.DEFAULT_INPUT_FILE):
        print(f"‚ùå –§–∞–π–ª {Config.DEFAULT_INPUT_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print("üîÑ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª—ñ–∑...")
    try:
        from liquidity_analyzer import LiquidityAnalyzer
        
        analyzer = LiquidityAnalyzer()
        df = analyzer.load_data(Config.DEFAULT_INPUT_FILE)
        results = analyzer.analyze_period(df)
        analyzer.save_results(results, Config.DEFAULT_OUTPUT_FILE)
        
        print(f"‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {Config.DEFAULT_OUTPUT_FILE}")
        
        # –ö–æ—Ä–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –ö–æ—Ä–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –û–±—Ä–æ–±–ª–µ–Ω–æ –¥–Ω—ñ–≤: {len(results)}")
        print(f"   London Sweep High: {(results['london_sweep_high'] == 'Yes').sum()}")
        print(f"   London Sweep Low: {(results['london_sweep_low'] == 'Yes').sum()}")
        print(f"   Continue: {(results['sweep_type'] == 'Continue').sum()}")
        print(f"   Sweep and Reverse: {(results['sweep_type'] == 'Sweep and Reverse').sum()}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ: {e}")

def show_results():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"""
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ê–ù–ê–õ–Ü–ó–£")
    
    if not os.path.exists(Config.DEFAULT_OUTPUT_FILE):
        print(f"‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ {Config.DEFAULT_OUTPUT_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("   –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∞–Ω–∞–ª—ñ–∑ (–æ–ø—Ü—ñ—è 2)")
        return
    
    try:
        df = pd.read_excel(Config.DEFAULT_OUTPUT_FILE, sheet_name='Analysis_Results')
        stats_df = pd.read_excel(Config.DEFAULT_OUTPUT_FILE, sheet_name='Statistics')
        
        print(f"üìÖ –ü–µ—Ä—ñ–æ–¥: {df['date'].min()} - {df['date'].max()}")
        print(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ –¥–Ω—ñ–≤: {len(df)}")
        
        print("\nüèÜ –¢–û–ü-5 –¥–Ω—ñ–≤ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º:")
        top5 = df.nlargest(5, 'extension_pips')[['date', 'day_of_week', 'extension_pips', 'sweep_type']]
        for _, row in top5.iterrows():
            print(f"   {row['date']} ({row['day_of_week']:<9}): {row['extension_pips']:>6.1f} –ø—É–Ω–∫—Ç—ñ–≤ - {row['sweep_type']}")
        
        print(f"\nüìà –°–µ—Ä–µ–¥–Ω—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è: {df['extension_pips'].mean():.1f} –ø—É–Ω–∫—Ç—ñ–≤")
        print(f"üìâ Rebalance rate: {(df['rebalance'] == 'Yes').sum()}/{len(df)} ({(df['rebalance'] == 'Yes').sum()/len(df)*100:.1f}%)")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {e}")

def show_detailed_stats():
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    print("\nüìà –î–ï–¢–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    
    if not os.path.exists(Config.DEFAULT_OUTPUT_FILE):
        print(f"‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    try:
        df = pd.read_excel(Config.DEFAULT_OUTPUT_FILE, sheet_name='Analysis_Results')
        stats_df = pd.read_excel(Config.DEFAULT_OUTPUT_FILE, sheet_name='Statistics')
        
        print("\nüìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for _, row in stats_df.iterrows():
            print(f"   {row['Metric']:<25}: {row['Value']:>3} ({row['Percentage']:>6.1f}%)")
        
        print("\nüìÖ –ê–Ω–∞–ª—ñ–∑ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è:")
        day_stats = df.groupby('day_of_week').agg({
            'extension_pips': 'mean',
            'sweep_type': lambda x: (x == 'Continue').sum()
        }).round(1)
        
        for day, row in day_stats.iterrows():
            print(f"   {day:<10}: {row['extension_pips']:>6.1f} –ø—É–Ω–∫—Ç—ñ–≤, Continue: {int(row['sweep_type'])}")
        
        print(f"\nüéØ –ö–æ—Ä–µ–ª—è—Ü—ñ—ó:")
        print(f"   Asia Range vs Extension: {df[['asia_high', 'asia_low', 'extension_pips']].corr().iloc[0,2]:.3f}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def list_files():
    """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤"""
    print("\nüóÇÔ∏è  –§–ê–ô–õ–ò –í –ü–†–û–ï–ö–¢–Ü:")
    
    files = os.listdir('.')
    files.sort()
    
    for file in files:
        if file.startswith('.'):
            continue
            
        size = os.path.getsize(file)
        if size > 1024*1024:
            size_str = f"{size/(1024*1024):.1f} MB"
        elif size > 1024:
            size_str = f"{size/1024:.1f} KB"
        else:
            size_str = f"{size} B"
            
        if file.endswith(('.py', '.csv', '.xlsx', '.txt', '.md')):
            print(f"   üìÑ {file:<30} ({size_str:>8})")
        elif os.path.isdir(file):
            print(f"   üìÅ {file}/")
        else:
            print(f"   üìÑ {file:<30} ({size_str:>8})")

def show_settings():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    print("\n‚öôÔ∏è  –ü–û–¢–û–ß–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:")
    print(f"   –í—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª: {Config.DEFAULT_INPUT_FILE}")
    print(f"   –í–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª: {Config.DEFAULT_OUTPUT_FILE}")
    print(f"   –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞: UTC+{Config.UTC_OFFSET}")
    print(f"   –†–æ–∑–º—ñ—Ä –ø—É–Ω–∫—Ç—É: {Config.PIP_SIZE}")
    print(f"   –î–æ–ø—É—Å–∫ Asia Mid: ¬±{int(Config.TOLERANCE/Config.PIP_SIZE)} –ø—É–Ω–∫—Ç—ñ–≤")
    
    print("\nüìÖ –¢–æ—Ä–≥–æ–≤—ñ —Å–µ—Å—ñ—ó (UTC+3):")
    for name, session in Config.SESSIONS.items():
        print(f"   {name.capitalize():<10}: {session['start']:02d}:00 - {session['end']:02d}:00")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_header()
    
    while True:
        print_menu()
        
        try:
            choice = input("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-6): ").strip()
            
            if choice == '0':
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            elif choice == '1':
                validate_data()
            elif choice == '2':
                run_analysis()
            elif choice == '3':
                show_results()
            elif choice == '4':
                show_detailed_stats()
            elif choice == '5':
                list_files()
            elif choice == '6':
                show_settings()
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                
        except KeyboardInterrupt:
            print("\n\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

if __name__ == "__main__":
    main()
