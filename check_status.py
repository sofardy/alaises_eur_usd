#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
"""

import os
import sys
from pathlib import Path

def check_project_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    main_files = [
        'liquidity_analyzer.py',
        'gui_app.py', 
        'menu.py',
        'batch_analyzer.py',
        'requirements.txt',
        'README.md'
    ]
    
    print("\nüìÅ –û–°–ù–û–í–ù–´–ï –§–ê–ô–õ–´:")
    for file in main_files:
        status = "‚úÖ" if os.path.exists(file) else "‚ùå"
        print(f"   {status} {file}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞–ª–æ–∫
    launchers = [
        'run_gui.sh',
        'run_gui.bat', 
        '–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.command'
    ]
    
    print("\nüöÄ –§–ê–ô–õ–´ –ó–ê–ü–£–°–ö–ê:")
    for launcher in launchers:
        status = "‚úÖ" if os.path.exists(launcher) else "‚ùå"
        executable = " (–∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π)" if os.access(launcher, os.X_OK) else ""
        print(f"   {status} {launcher}{executable}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
    folders = ['files', 'results', 'venv', '__pycache__']
    
    print("\nüìÇ –ü–ê–ü–ö–ò:")
    for folder in folders:
        if os.path.exists(folder):
            if folder == 'files':
                count = len(list(Path(folder).glob("*.csv"))) + len(list(Path(folder).glob("*.xlsx")))
                print(f"   ‚úÖ {folder}/ ({count} —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö)")
            elif folder == 'results':
                count = len(list(Path(folder).glob("*.xlsx")))
                print(f"   ‚úÖ {folder}/ ({count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
            elif folder == 'venv':
                print(f"   ‚úÖ {folder}/ (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ)")
            else:
                print(f"   ‚úÖ {folder}/")
        else:
            print(f"   ‚ùå {folder}/")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\nüìö –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
    try:
        import pandas
        print("   ‚úÖ pandas")
    except ImportError:
        print("   ‚ùå pandas")
    
    try:
        import openpyxl  
        print("   ‚úÖ openpyxl")
    except ImportError:
        print("   ‚ùå openpyxl")
        
    try:
        import tkinter
        print("   ‚úÖ tkinter (GUI)")
    except ImportError:
        print("   ‚ùå tkinter (GUI)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = Path("results")
    if results_dir.exists():
        xlsx_files = list(results_dir.glob("*.xlsx"))
        if xlsx_files:
            latest = max(xlsx_files, key=lambda x: x.stat().st_mtime)
            print(f"\nüìä –ü–û–°–õ–ï–î–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print(f"   üìà {latest.name}")
            print(f"   üìÖ {latest.stat().st_mtime}")
    
    print("\n" + "=" * 50)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê:")
    print("")
    print("   GUI:      ./run_gui.sh")
    print("   –ú–µ–Ω—é:     python menu.py") 
    print("   –ê–Ω–∞–ª–∏–∑:   python liquidity_analyzer.py")
    print("   –ú–∞—Å—Å–æ–≤–æ:  python batch_analyzer.py")
    print("")
    print("üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    check_project_status()
