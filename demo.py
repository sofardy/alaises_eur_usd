#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§—ñ–Ω–∞–ª—å–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É –∞–Ω–∞–ª—ñ–∑—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ EUR/USD
"""

import os
import pandas as pd
from datetime import datetime

def print_project_info():
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç"""
    print("üöÄ –ê–ù–ê–õ–Ü–ó–ê–¢–û–† –õ–Ü–ö–í–Ü–î–ù–û–°–¢–Ü EUR/USD")
    print("=" * 50)
    print("üìã –ü—Ä–æ–µ–∫—Ç —Ä–µ–∞–ª—ñ–∑—É—î –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–µ—Å—ñ–π:")
    print("   ‚Ä¢ –ê–∑—ñ—è (02:00-10:00 UTC+3)")
    print("   ‚Ä¢ –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç (09:00-10:00 UTC+3)")  
    print("   ‚Ä¢ –õ–æ–Ω–¥–æ–Ω (10:00-15:00 UTC+3)")
    print("   ‚Ä¢ –ù—å—é-–ô–æ—Ä–∫ (15:00-19:00 UTC+3)")
    print()

def show_project_structure():
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É"""
    print("üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–£:")
    print("-" * 25)
    
    files_info = {
        'liquidity_analyzer.py': 'üîß –û—Å–Ω–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä',
        'interactive.py': 'üñ•Ô∏è  –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
        'validator.py': '‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö',
        'show_results.py': 'üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤',
        'config.py': '‚öôÔ∏è  –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è',
        'run_analysis.sh': 'üöÄ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫—É',
        'requirements.txt': 'üìö –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ',
        'README.md': 'üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è',
        'DAT_MT_EURUSD_M1_202505.csv': 'üìà –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ (1.7MB)',
        'liquidity_analysis_results.xlsx': 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É'
    }
    
    for file, desc in files_info.items():
        if os.path.exists(file):
            size = os.path.getsize(file)
            if size > 1024*1024:
                size_str = f"({size/(1024*1024):.1f}MB)"
            elif size > 1024:
                size_str = f"({size/1024:.0f}KB)"
            else:
                size_str = f"({size}B)"
            print(f"   {desc:<30} {size_str:>8}")
        else:
            print(f"   {desc:<30} {'‚ùå':>8}")
    print()

def show_analysis_results():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É"""
    results_file = 'liquidity_analysis_results.xlsx'
    
    if not os.path.exists(results_file):
        print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("   –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python liquidity_analyzer.py")
        return
    
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ê–ù–ê–õ–Ü–ó–£:")
    print("-" * 25)
    
    # –û—Å–Ω–æ–≤–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    df = pd.read_excel(results_file, sheet_name='Analysis_Results')
    stats_df = pd.read_excel(results_file, sheet_name='Statistics')
    
    print(f"üìÖ –ü–µ—Ä—ñ–æ–¥ –∞–Ω–∞–ª—ñ–∑—É: {df['date'].min()} - {df['date'].max()}")
    print(f"üìä –¢–æ—Ä–≥–æ–≤–∏—Ö –¥–Ω—ñ–≤: {len(df)}")
    print(f"üìà –ó–∞–ø–∏—Å—ñ–≤ —É –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö: 31,215 (M1 –¥–∞–Ω—ñ)")
    print()
    
    # –ö–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
    print("üéØ –ö–õ–Æ–ß–û–í–Ü –ú–ï–¢–†–ò–ö–ò:")
    key_metrics = [
        'London Sweep High', 'London Sweep Low', 'Continue', 
        'Sweep and Reverse', 'No Sweep', 'Rebalance Yes'
    ]
    
    for metric in key_metrics:
        row = stats_df[stats_df['Metric'] == metric]
        if not row.empty:
            value = row.iloc[0]['Value']
            percentage = row.iloc[0]['Percentage']
            print(f"   {metric:<20}: {value:>2} ({percentage:>5.1f}%)")
    print()
    
    # –¢–æ–ø –¥–Ω—ñ
    print("üèÜ –¢–û–ü-3 –î–ù–Ü –ó–ê –†–û–ó–®–ò–†–ï–ù–ù–Ø–ú:")
    top3 = df.nlargest(3, 'extension_pips')
    for i, (_, row) in enumerate(top3.iterrows(), 1):
        print(f"   {i}. {row['date']} ({row['day_of_week']:<9}): {row['extension_pips']:>6.1f} –ø—É–Ω–∫—Ç—ñ–≤ - {row['sweep_type']}")
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—ñ—è–º
    print("üìà –°–ï–†–ï–î–ù–Ü –ü–û–ö–ê–ó–ù–ò–ö–ò:")
    print(f"   –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –õ–æ–Ω–¥–æ–Ω: {df['extension_pips'].mean():.1f} ¬± {df['extension_pips'].std():.1f} –ø—É–Ω–∫—Ç—ñ–≤")
    print(f"   –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è NY –≤–≥–æ—Ä—É: {df['ny_up_extension_pips'].mean():.1f} –ø—É–Ω–∫—Ç—ñ–≤")
    print(f"   –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è NY –≤–Ω–∏–∑: {df['ny_down_extension_pips'].mean():.1f} –ø—É–Ω–∫—Ç—ñ–≤")
    print(f"   Asia Range: {((df['asia_high'] - df['asia_low']) / 0.00010).mean():.1f} –ø—É–Ω–∫—Ç—ñ–≤")
    print()

def show_technical_features():
    """–¢–µ—Ö–Ω—ñ—á–Ω—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ"""
    print("‚öôÔ∏è  –¢–ï–•–ù–Ü–ß–ù–Ü –û–°–û–ë–õ–ò–í–û–°–¢–Ü:")
    print("-" * 30)
    print("‚úÖ –ü–æ–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è")
    print("‚úÖ –û–±—Ä–æ–±–∫–∞ M1 –¥–∞–Ω–∏—Ö (31,215 –∑–∞–ø–∏—Å—ñ–≤)")
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è —É UTC+3")
    print("‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —è–∫–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö")
    print("‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ sweep")
    print("‚úÖ –ê–Ω–∞–ª—ñ–∑ rebalance —Ç–∞ retests")
    print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è")
    print("‚úÖ –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É Excel")
    print("‚úÖ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("‚úÖ –ú–æ–¥—É–ª—å–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞")
    print()

def show_usage_examples():
    """–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    print("üîß –°–ü–û–°–û–ë–ò –ó–ê–ü–£–°–ö–£:")
    print("-" * 20)
    print("1. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º:")
    print("   python interactive.py")
    print()
    print("2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫:")
    print("   ./run_analysis.sh")
    print()
    print("3. –ü—Ä—è–º–∏–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É:")
    print("   python liquidity_analyzer.py")
    print()
    print("4. –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:")
    print("   python show_results.py")
    print()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è"""
    print_project_info()
    show_project_structure()
    show_analysis_results()
    show_technical_features()
    show_usage_examples()
    
    print("üéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í–ò–ô –î–û –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø!")
    print("=" * 40)
    print("üìñ –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: README.md")
    print("üöÄ –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç: ./run_analysis.sh")
    print("üñ•Ô∏è  –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º: python interactive.py")

if __name__ == "__main__":
    main()
