#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ EUR/USD
–ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è "–ø—Ä–æ—Å—Ç—ã—Ö —Å–º–µ—Ä—Ç–Ω—ã—Ö"
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import sys
import os
import subprocess
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from liquidity_analyzer import LiquidityAnalyzer
    from batch_liquidity_analyzer import BatchLiquidityAnalyzer
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

class LiquidityAnalysisGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üìä –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ EUR/USD - –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.is_processing = False
        self.current_thread = None
        
        self.setup_ui()
        self.check_dependencies()
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.root)
        title_frame.pack(pady=10, padx=20, fill='x')
        
        title_label = ttk.Label(
            title_frame, 
            text="üìä –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ EUR/USD", 
            font=('Arial', 16, 'bold')
        )
        title_label.pack()
        
        subtitle_label = ttk.Label(
            title_frame, 
            text="–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞", 
            font=('Arial', 10)
        )
        subtitle_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self.root)
        notebook.pack(pady=10, padx=20, fill='both', expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –û–¥–∏–Ω —Ñ–∞–π–ª
        self.single_frame = ttk.Frame(notebook)
        notebook.add(self.single_frame, text="üìÑ –û–¥–∏–Ω —Ñ–∞–π–ª")
        self.setup_single_file_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        self.batch_frame = ttk.Frame(notebook)
        notebook.add(self.batch_frame, text="üìÅ –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        self.setup_batch_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –°–ø—Ä–∞–≤–∫–∞
        self.help_frame = ttk.Frame(notebook)
        notebook.add(self.help_frame, text="‚ùì –°–ø—Ä–∞–≤–∫–∞")
        self.setup_help_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_frame = ttk.Frame(self.root)
        self.status_frame.pack(side='bottom', fill='x', padx=20, pady=5)
        
        self.status_label = ttk.Label(
            self.status_frame, 
            text="‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
            font=('Arial', 9)
        )
        self.status_label.pack(side='left')
        
        self.progress = ttk.Progressbar(
            self.status_frame, 
            mode='indeterminate'
        )
        self.progress.pack(side='right', padx=(10, 0))
    
    def setup_single_file_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_frame = ttk.LabelFrame(self.single_frame, text="üìÇ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞", padding=10)
        file_frame.pack(pady=10, padx=10, fill='x')
        
        self.file_path_var = tk.StringVar()
        file_entry = ttk.Entry(file_frame, textvariable=self.file_path_var, width=60)
        file_entry.pack(side='left', fill='x', expand=True)
        
        browse_btn = ttk.Button(
            file_frame, 
            text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", 
            command=self.browse_file
        )
        browse_btn.pack(side='right', padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        analyze_frame = ttk.Frame(self.single_frame)
        analyze_frame.pack(pady=10)
        
        self.analyze_btn = ttk.Button(
            analyze_frame,
            text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
            command=self.start_single_analysis,
            style='Accent.TButton'
        )
        self.analyze_btn.pack()
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(self.single_frame, text="üìù –ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞", padding=10)
        log_frame.pack(pady=10, padx=10, fill='both', expand=True)
        
        self.single_log = scrolledtext.ScrolledText(
            log_frame, 
            height=15, 
            wrap=tk.WORD,
            font=('Consolas', 9)
        )
        self.single_log.pack(fill='both', expand=True)
    
    def setup_batch_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–∞—Ö
        info_frame = ttk.LabelFrame(self.batch_frame, text="üìÅ –ü–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞", padding=10)
        info_frame.pack(pady=10, padx=10, fill='x')
        
        files_info = ttk.Label(
            info_frame, 
            text="üì• –í—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: –ø–∞–ø–∫–∞ 'files/' (–ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ CSV/XLSX —Ñ–∞–π–ª—ã)"
        )
        files_info.pack(anchor='w')
        
        results_info = ttk.Label(
            info_frame, 
            text="üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: –ø–∞–ø–∫–∞ 'results/' (Excel —Ñ–∞–π–ª—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º)"
        )
        results_info.pack(anchor='w')
        
        # –°—Ç–∞—Ç—É—Å –ø–∞–ø–æ–∫
        status_frame = ttk.LabelFrame(self.batch_frame, text="üìä –°—Ç–∞—Ç—É—Å", padding=10)
        status_frame.pack(pady=10, padx=10, fill='x')
        
        self.files_count_label = ttk.Label(status_frame, text="–ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤...")
        self.files_count_label.pack(anchor='w')
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(self.batch_frame)
        buttons_frame.pack(pady=10)
        
        refresh_btn = ttk.Button(
            buttons_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
            command=self.update_batch_status
        )
        refresh_btn.pack(side='left', padx=5)
        
        self.batch_analyze_btn = ttk.Button(
            buttons_frame,
            text="üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã",
            command=self.start_batch_analysis,
            style='Accent.TButton'
        )
        self.batch_analyze_btn.pack(side='left', padx=5)
        
        open_results_btn = ttk.Button(
            buttons_frame,
            text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            command=self.open_results_folder
        )
        open_results_btn.pack(side='left', padx=5)
        
        # –õ–æ–≥
        batch_log_frame = ttk.LabelFrame(self.batch_frame, text="üìù –ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏", padding=10)
        batch_log_frame.pack(pady=10, padx=10, fill='both', expand=True)
        
        self.batch_log = scrolledtext.ScrolledText(
            batch_log_frame, 
            height=15, 
            wrap=tk.WORD,
            font=('Consolas', 9)
        )
        self.batch_log.pack(fill='both', expand=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.root.after(1000, self.update_batch_status)
    
    def setup_help_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å–ø—Ä–∞–≤–∫–∏"""
        
        help_text = """
üéØ –ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø –ü–†–û–ì–†–ê–ú–ú–û–ô

üìã –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
‚Ä¢ Python 3.8 –∏–ª–∏ –Ω–æ–≤–µ–µ
‚Ä¢ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ XLSX
‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: Date, Time, Open, High, Low, Close

üìÇ –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–û–í:
‚Ä¢ files/ - –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ CSV/XLSX —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
‚Ä¢ results/ - –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel

üöÄ –°–ü–û–°–û–ë–´ –†–ê–ë–û–¢–´:

1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –û–î–ù–û–ì–û –§–ê–ô–õ–ê:
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "üìÑ –û–¥–∏–Ω —Ñ–∞–π–ª"
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ CSV/XLSX
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"
   ‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –Ω–∞–π–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–ø–∫–µ results/

2Ô∏è‚É£ –ú–ê–°–°–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:
   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫—É files/
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "üìÅ –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã"
   ‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!)
   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ results/

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚Ä¢ –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç Excel —Å –¥–≤—É–º—è –ª–∏—Å—Ç–∞–º–∏:
  - Analysis_Results: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
  - Statistics: –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç

üîß –§–û–†–ú–ê–¢ –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•:
‚Ä¢ Date: YYYY.MM.DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024.01.15)
‚Ä¢ Time: HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:30)
‚Ä¢ Open, High, Low, Close: —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.23456
‚Ä¢ Volume: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è

‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ú–û–ú–ï–ù–¢–´:
‚Ä¢ –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (–≥–æ–¥—ã –¥–∞–Ω–Ω—ã—Ö) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–æ–ª–≥–æ
‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –æ–∫–Ω–∞
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ

‚ùì –ü–†–ò –ü–†–û–ë–õ–ï–ú–ê–•:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞–≤–∏—Å–ª–æ
        """
        
        help_scroll = scrolledtext.ScrolledText(
            self.help_frame, 
            wrap=tk.WORD,
            font=('Arial', 10)
        )
        help_scroll.pack(fill='both', expand=True, padx=10, pady=10)
        help_scroll.insert('1.0', help_text)
        help_scroll.config(state='disabled')
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            import pandas
            import openpyxl
            self.log_message("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", target='both')
        except ImportError as e:
            self.log_message(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}", target='both')
            messagebox.showerror(
                "–û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", 
                f"–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n{e}\n\n"
                "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:\npip install pandas openpyxl"
            )
    
    def browse_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö",
            filetypes=[
                ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                ("Excel —Ñ–∞–π–ª—ã", "*.xlsx"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        if file_path:
            self.file_path_var.set(file_path)
    
    def update_batch_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        files_dir = Path("files")
        results_dir = Path("results")
        
        if files_dir.exists():
            csv_files = list(files_dir.glob("*.csv"))
            xlsx_files = list(files_dir.glob("*.xlsx"))
            total_files = len(csv_files) + len(xlsx_files)
        else:
            total_files = 0
        
        if results_dir.exists():
            result_files = len(list(results_dir.glob("*.xlsx")))
        else:
            result_files = 0
        
        status_text = f"üì• –í—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {total_files} | üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result_files}"
        self.files_count_label.config(text=status_text)
    
    def log_message(self, message, target='single'):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = time.strftime("%H:%M:%S")
        full_message = f"[{timestamp}] {message}\n"
        
        if target in ['single', 'both']:
            self.single_log.insert(tk.END, full_message)
            self.single_log.see(tk.END)
        
        if target in ['batch', 'both']:
            self.batch_log.insert(tk.END, full_message)
            self.batch_log.see(tk.END)
        
        self.root.update()
    
    def set_processing_state(self, processing):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.is_processing = processing
        
        if processing:
            self.analyze_btn.config(state='disabled')
            self.batch_analyze_btn.config(state='disabled')
            self.progress.start()
            self.status_label.config(text="‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        else:
            self.analyze_btn.config(state='normal')
            self.batch_analyze_btn.config(state='normal')
            self.progress.stop()
            self.status_label.config(text="‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def start_single_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if self.is_processing:
            return
        
        file_path = self.file_path_var.get().strip()
        if not file_path:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        if not os.path.exists(file_path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞
        self.single_log.delete(1.0, tk.END)
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.current_thread = threading.Thread(
            target=self.run_single_analysis,
            args=(file_path,)
        )
        self.current_thread.daemon = True
        self.current_thread.start()
    
    def run_single_analysis(self, file_path):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            self.set_processing_state(True)
            self.log_message(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            analyzer = LiquidityAnalyzer()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.log_message("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            df = analyzer.load_data(file_path)
            self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑
            self.log_message("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...")
            results = analyzer.analyze_period(df)
            self.log_message(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –¥–Ω–µ–π")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            output_name = f"analysis_{os.path.splitext(os.path.basename(file_path))[0]}_{int(time.time())}.xlsx"
            output_path = os.path.join("results", output_name)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ results –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs("results", exist_ok=True)
            
            self.log_message("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            analyzer.save_results(results, output_path)
            
            self.log_message(f"üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path}")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
            if messagebox.askyesno("–ì–æ—Ç–æ–≤–æ!", f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤?\n{output_path}"):
                self.open_file(output_path)
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")
        
        finally:
            self.set_processing_state(False)
    
    def start_batch_analysis(self):
        """–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.is_processing:
            return
        
        files_dir = Path("files")
        if not files_dir.exists():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–∞–ø–∫–∞ 'files' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        files = list(files_dir.glob("*.csv")) + list(files_dir.glob("*.xlsx"))
        if not files:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í –ø–∞–ø–∫–µ 'files' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ CSV –∏–ª–∏ XLSX")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            f"–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        ):
            return
        
        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞
        self.batch_log.delete(1.0, tk.END)
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.current_thread = threading.Thread(target=self.run_batch_analysis)
        self.current_thread.daemon = True
        self.current_thread.start()
    
    def run_batch_analysis(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            self.set_processing_state(True)
            self.log_message("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É", target='batch')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            batch_analyzer = BatchLiquidityAnalyzer()
            
            # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            def progress_callback(current, total, filename):
                self.log_message(f"üìä [{current}/{total}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {filename}", target='batch')
            
            summary_file = batch_analyzer.process_all_files(
                input_folder="files",
                output_folder="results",
                progress_callback=progress_callback
            )
            
            self.log_message(f"üéâ –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", target='batch')
            self.log_message(f"üìà –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç: {summary_file}", target='batch')
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            self.update_batch_status()
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É
            if messagebox.askyesno("–ì–æ—Ç–æ–≤–æ!", "–ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏?"):
                self.open_results_folder()
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", target='batch')
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")
        
        finally:
            self.set_processing_state(False)
    
    def open_results_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        results_path = os.path.abspath("results")
        if os.path.exists(results_path):
            if sys.platform == "darwin":  # macOS
                subprocess.run(["open", results_path])
            elif sys.platform == "win32":  # Windows
                subprocess.run(["explorer", results_path])
            else:  # Linux
                subprocess.run(["xdg-open", results_path])
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–∞–ø–∫–∞ results –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    def open_file(self, file_path):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞"""
        if os.path.exists(file_path):
            if sys.platform == "darwin":  # macOS
                subprocess.run(["open", file_path])
            elif sys.platform == "win32":  # Windows
                subprocess.run(["start", file_path], shell=True)
            else:  # Linux
                subprocess.run(["xdg-open", file_path])

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    os.makedirs("files", exist_ok=True)
    os.makedirs("results", exist_ok=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ GUI
    root = tk.Tk()
    app = LiquidityAnalysisGUI(root)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")

if __name__ == "__main__":
    main()
