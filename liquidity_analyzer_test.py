#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª—ñ–∑ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ EUR/USD –ø–æ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–µ—Å—ñ—è—Ö
–ê–≤—Ç–æ—Ä: GitHub Copilot
–í–µ—Ä—Å—ñ—è: 2.0 - –∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—î—é UTC ‚Üí Europe/Kyiv (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º DST)
"""

import pandas as pd
import numpy as np
import os
from datetime import datetime, timedelta
import warnings

warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
try:
    import pytz
    HAS_PYTZ = True
except ImportError:
    HAS_PYTZ = False
    try:
        import zoneinfo
        HAS_ZONEINFO = True
    except ImportError:
        HAS_ZONEINFO = False


class LiquidityAnalyzer:
    """–ö–ª–∞—Å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ EUR/USD –ø–æ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–µ—Å—ñ—è—Ö"""
    
    def __init__(self):
        self.pip_size = 0.00010  # –†–æ–∑–º—ñ—Ä –ø—É–Ω–∫—Ç—É –¥–ª—è EUR/USD
        self.tolerance = 0.00030  # –î–æ–ø—É—Å–∫ –¥–ª—è Asia Mid (¬±3 –ø—É–Ω–∫—Ç–∏)
        
    def load_data(self, file_path):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö"""
        print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É: {file_path}")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ
            with open(file_path, 'r', encoding='utf-8') as f:
                first_line = f.readline().strip().lower()
            has_header = ('date' in first_line and 'time' in first_line)

            if file_path.endswith('.xlsx'):
                df = pd.read_excel(file_path)
            else:
                if has_header:
                    df = pd.read_csv(file_path)
                else:
                    df = pd.read_csv(file_path, header=None, names=['Date', 'Time', 'Open', 'High', 'Low', 'Close', 'Volume'])

            if df.empty:
                print(f"‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π: {file_path}")
                return None

            # –û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–∞—Ç–∏ —ñ —á–∞—Å—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
            parse_success = False
            for date_fmt in ['%Y.%m.%d %H:%M', '%Y-%m-%d %H:%M', '%Y.%m.%d %H:%M:%S', '%Y-%m-%d %H:%M:%S']:
                try:
                    # –°–æ–∑–¥–∞–µ–º datetime –∫–∞–∫ UTC
                    df['Datetime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'], format=date_fmt, utc=True)
                    parse_success = True
                    print(f"‚úÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {date_fmt}")
                    break
                except:
                    continue

            if not parse_success:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                return None

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑ UTC –≤ Europe/Kyiv –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º DST
            if HAS_PYTZ:
                kyiv_tz = pytz.timezone('Europe/Kyiv')
                df['Datetime'] = df['Datetime'].dt.tz_convert(kyiv_tz)
                print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: UTC ‚Üí Europe/Kyiv (pytz)")
            elif HAS_ZONEINFO:
                from zoneinfo import ZoneInfo
                kyiv_tz = ZoneInfo('Europe/Kyiv')
                df['Datetime'] = df['Datetime'].dt.tz_convert(kyiv_tz)
                print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: UTC ‚Üí Europe/Kyiv (zoneinfo)")
            else:
                df['Datetime'] = df['Datetime'] + pd.Timedelta(hours=3)
                print("‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: UTC+3 (–±–µ–∑ —É—á–µ—Ç–∞ DST)")

            # –ó–∞–ª–∏—à–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
            df = df[['Datetime', 'Open', 'High', 'Low', 'Close']].copy()
            df = df.drop_duplicates(subset=['Datetime']).dropna()
            df = df.sort_values('Datetime').reset_index(drop=True)
            
            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤")
            print(f"   –ü–µ—Ä—ñ–æ–¥: {df['Datetime'].min()} - {df['Datetime'].max()}")
            
            return df
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É"""
    print("üöÄ –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ UTC ‚Üí Europe/Kyiv")
    print("=" * 60)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞
    analyzer = LiquidityAnalyzer()
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    df = analyzer.load_data('files/3_.csv')
    
    if df is not None:
        print(f"\nüìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {df['Datetime'].dt.tz}")
        print(f"üìÖ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {df['Datetime'].iloc[0]}")
        print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {df['Datetime'].iloc[-1]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Å—è—Ü—ã –¥–ª—è DST
        sample_dates = df['Datetime'].dt.date.unique()[:5]
        print(f"\nüîç –û–±—Ä–∞–∑—Ü—ã –¥–∞—Ç –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        for date in sample_dates:
            date_data = df[df['Datetime'].dt.date == date]
            if not date_data.empty:
                first_time = date_data['Datetime'].iloc[0]
                print(f"   {date}: {first_time} (UTC offset: {first_time.utcoffset()})")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    main()
