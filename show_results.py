#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ EUR/USD
"""

import pandas as pd
import numpy as np
from datetime import datetime

def show_results():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É"""
    
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –ê–ù–ê–õ–Ü–ó–£ –õ–Ü–ö–í–Ü–î–ù–û–°–¢–Ü EUR/USD")
    print("=" * 60)
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        df = pd.read_excel('liquidity_analysis_results.xlsx', sheet_name='Analysis_Results')
        stats_df = pd.read_excel('liquidity_analysis_results.xlsx', sheet_name='Statistics')
        
        print(f"üìÖ –ü–µ—Ä—ñ–æ–¥ –∞–Ω–∞–ª—ñ–∑—É: {df['date'].min()} - {df['date'].max()}")
        print(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤–∏—Ö –¥–Ω—ñ–≤: {len(df)}")
        print()
        
        # –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìà –û–°–ù–û–í–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 30)
        for _, row in stats_df.iterrows():
            print(f"{row['Metric']:<25}: {row['Value']:>3} ({row['Percentage']:>6.1f}%)")
        print()
        
        # –ù–∞–π–∫—Ä–∞—â—ñ —Ç–∞ –Ω–∞–π–≥—ñ—Ä—à—ñ –¥–Ω—ñ
        print("üèÜ –¢–û–ü-5 –î–ù–Ü–í –ó–ê –†–û–ó–®–ò–†–ï–ù–ù–Ø–ú:")
        print("-" * 40)
        top_days = df.nlargest(5, 'extension_pips')[['date', 'day_of_week', 'sweep_type', 'extension_pips', 'extension_percent']]
        for _, row in top_days.iterrows():
            print(f"{row['date']} ({row['day_of_week']:<9}): {row['extension_pips']:>6.1f} –ø—É–Ω–∫—Ç—ñ–≤ ({row['extension_percent']:>6.1f}%) - {row['sweep_type']}")
        print()
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è
        print("üìÖ –ê–ù–ê–õ–Ü–ó –ü–û –î–ù–Ø–• –¢–ò–ñ–ù–Ø:")
        print("-" * 30)
        day_analysis = df.groupby('day_of_week').agg({
            'extension_pips': 'mean',
            'extension_percent': 'mean',
            'sweep_type': lambda x: (x == 'Continue').sum(),
            'london_direction': lambda x: (x == 'Long').sum()
        }).round(2)
        
        for day, row in day_analysis.iterrows():
            print(f"{day:<10}: –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è {row['extension_pips']:>6.1f} –ø—É–Ω–∫—Ç—ñ–≤, Continue: {int(row['sweep_type'])}, Long: {int(row['london_direction'])}")
        print()
        
        # Sweep Type –∞–Ω–∞–ª—ñ–∑
        print("üéØ –ê–ù–ê–õ–Ü–ó –¢–ò–ü–Ü–í SWEEP:")
        print("-" * 25)
        sweep_analysis = df.groupby('sweep_type').agg({
            'extension_pips': ['mean', 'std'],
            'rebalance': lambda x: (x == 'Yes').sum()
        }).round(2)
        
        for sweep_type in sweep_analysis.index:
            mean_ext = sweep_analysis.loc[sweep_type, ('extension_pips', 'mean')]
            std_ext = sweep_analysis.loc[sweep_type, ('extension_pips', 'std')]
            rebalance_count = int(sweep_analysis.loc[sweep_type, ('rebalance', '<lambda>')])
            print(f"{sweep_type:<17}: {mean_ext:>6.1f}¬±{std_ext:>5.1f} –ø—É–Ω–∫—Ç—ñ–≤, Rebalance: {rebalance_count}")
        print()
        
        # NY vs London –∞–Ω–∞–ª—ñ–∑
        print("üåç LONDON vs NEW YORK:")
        print("-" * 25)
        ny_support = (df['ny_status'] == 'Support').sum()
        ny_reverse = (df['ny_status'] == 'Reverse').sum()
        print(f"NY Support London: {ny_support} ({ny_support/len(df)*100:.1f}%)")
        print(f"NY Reverse London: {ny_reverse} ({ny_reverse/len(df)*100:.1f}%)")
        print()
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        print("üìä –î–û–î–ê–¢–ö–û–í–Ü –ú–ï–¢–†–ò–ö–ò:")
        print("-" * 20)
        print(f"–°–µ—Ä–µ–¥–Ω—î Asia Range: {(df['asia_high'] - df['asia_low']).mean()/0.00010:.1f} –ø—É–Ω–∫—Ç—ñ–≤")
        print(f"Rebalance Rate: {(df['rebalance'] == 'Yes').sum()}/{len(df)} ({(df['rebalance'] == 'Yes').sum()/len(df)*100:.1f}%)")
        print(f"–°–µ—Ä–µ–¥–Ω—ñ–π Reverse: {df['reverse_pips'].mean():.1f} –ø—É–Ω–∫—Ç—ñ–≤")
        print()
        
        # –ü—Ä–∏–∫–ª–∞–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
        print("üîç –ü–†–ò–ö–õ–ê–î –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–Ü–ó–£ (–Ω–∞–π–∫—Ä–∞—â–∏–π –¥–µ–Ω—å):")
        print("-" * 50)
        best_day = df.loc[df['extension_pips'].idxmax()]
        print(f"–î–∞—Ç–∞: {best_day['date']} ({best_day['day_of_week']})")
        print(f"Asia High: {best_day['asia_high']:.5f}")
        print(f"Asia Low: {best_day['asia_low']:.5f}")
        print(f"Asia Mid: {best_day['asia_mid']:.5f}")
        print(f"London Sweep: High={best_day['london_sweep_high']}, Low={best_day['london_sweep_low']}")
        print(f"Sweep Type: {best_day['sweep_type']}")
        print(f"London Direction: {best_day['london_direction']}")
        print(f"Extension: {best_day['extension_pips']:.1f} –ø—É–Ω–∫—Ç—ñ–≤ ({best_day['extension_percent']:.1f}%)")
        print(f"Rebalance: {best_day['rebalance']}")
        print(f"NY Direction: {best_day['ny_direction']}")
        print(f"NY Status: {best_day['ny_status']}")
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∞–Ω–∞–ª—ñ–∑: python liquidity_analyzer.py")

if __name__ == "__main__":
    show_results()
