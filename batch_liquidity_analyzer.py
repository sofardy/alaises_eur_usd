#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ EUR/USD
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ files/ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ results/
"""

import os
import glob
import pandas as pd
from datetime import datetime
import traceback
from liquidity_analyzer import LiquidityAnalyzer

class BatchLiquidityAnalyzer:
    def __init__(self, files_dir="files", results_dir="results"):
        self.files_dir = files_dir
        self.results_dir = results_dir
        self.processed_files = []
        self.failed_files = []
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        os.makedirs(self.files_dir, exist_ok=True)
        os.makedirs(self.results_dir, exist_ok=True)
    
    def get_files_list(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö CSV –∏ XLSX —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ files/"""
        patterns = [
            os.path.join(self.files_dir, "*.csv"),
            os.path.join(self.files_dir, "*.xlsx"),
            os.path.join(self.files_dir, "*.CSV"),
            os.path.join(self.files_dir, "*.XLSX")
        ]
        
        files = []
        for pattern in patterns:
            files.extend(glob.glob(pattern))
        
        return sorted(files)
    
    def extract_file_info(self, filepath):
        """–ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ –∏ –ø–µ—Ä–∏–æ–¥–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        filename = os.path.basename(filepath)
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        name_without_ext = os.path.splitext(filename)[0]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É
        pair = "UNKNOWN"
        if "EURUSD" in filename.upper():
            pair = "EURUSD"
        elif "EUR_USD" in filename.upper():
            pair = "EURUSD"
        elif "GBPUSD" in filename.upper():
            pair = "GBPUSD"
        elif "USDJPY" in filename.upper():
            pair = "USDJPY"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–∏–æ–¥/–≥–æ–¥
        period = "UNKNOWN"
        for year in range(2020, 2030):
            if str(year) in filename:
                period = str(year)
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≥–æ–¥, –∏—â–µ–º –º–µ—Å—è—Ü
        if period == "UNKNOWN":
            months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN',
                     'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
            for month in months:
                if month in filename.upper():
                    period = month
                    break
        
        return pair, period, name_without_ext
    
    def process_single_file(self, filepath):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {os.path.basename(filepath)}")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            pair, period, base_name = self.extract_file_info(filepath)
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            analyzer = LiquidityAnalyzer()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            print("   üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
            df = analyzer.load_data(filepath)
            
            if df is None or len(df) == 0:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
            
            print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            print("   üî¨ –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑...")
            results = analyzer.analyze_data(df)
            
            if results is None or len(results) == 0:
                raise ValueError("–ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            print(f"   ‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_filename = f"{base_name}_{pair}_{period}_analysis_{timestamp}.xlsx"
            output_path = os.path.join(self.results_dir, output_filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            analyzer.save_results(results, output_path)
            
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_filename}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            self.processed_files.append({
                'input_file': filepath,
                'output_file': output_path,
                'pair': pair,
                'period': period,
                'records_count': len(df),
                'analysis_days': len(results),
                'processing_time': datetime.now()
            })
            
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filepath}: {str(e)}"
            print(f"   ‚ùå {error_msg}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö
            self.failed_files.append({
                'input_file': filepath,
                'error': str(e),
                'traceback': traceback.format_exc(),
                'processing_time': datetime.now()
            })
            
            return False
    
    def create_summary_report(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º"""
        if not self.processed_files and not self.failed_files:
            return
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        summary_path = os.path.join(self.results_dir, f"batch_summary_{timestamp}.xlsx")
        
        with pd.ExcelWriter(summary_path, engine='openpyxl') as writer:
            
            # –õ–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if self.processed_files:
                processed_df = pd.DataFrame(self.processed_files)
                processed_df['processing_time'] = processed_df['processing_time'].dt.strftime('%Y-%m-%d %H:%M:%S')
                processed_df.to_excel(writer, sheet_name='Processed_Files', index=False)
            
            # –õ–∏—Å—Ç –æ—à–∏–±–æ–∫
            if self.failed_files:
                failed_df = pd.DataFrame(self.failed_files)
                failed_df['processing_time'] = failed_df['processing_time'].dt.strftime('%Y-%m-%d %H:%M:%S')
                failed_df.to_excel(writer, sheet_name='Failed_Files', index=False)
        
        print(f"\nüìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(summary_path)}")
        return summary_path
    
    def run_batch_analysis(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤...")
        print(f"üìÅ –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏: {os.path.abspath(self.files_dir)}")
        print(f"üìÅ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {os.path.abspath(self.results_dir)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files_list = self.get_files_list()
        
        if not files_list:
            print(f"\n‚ùå –í –ø–∞–ø–∫–µ '{self.files_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã CSV –∏–ª–∏ XLSX")
            print("   –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —ç—Ç—É –ø–∞–ø–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")
            return
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(files_list)}")
        for i, file_path in enumerate(files_list, 1):
            print(f"   {i}. {os.path.basename(file_path)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        start_time = datetime.now()
        
        for i, file_path in enumerate(files_list, 1):
            print(f"\n{'='*60}")
            print(f"üìÅ –§–∞–π–ª {i}/{len(files_list)}: {os.path.basename(file_path)}")
            print(f"{'='*60}")
            
            self.process_single_file(file_path)
        
        # –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        end_time = datetime.now()
        duration = end_time - start_time
        
        print(f"\n{'='*60}")
        print("üèÅ –ò–¢–û–ì–ò –ú–ê–°–°–û–í–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
        print(f"{'='*60}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.processed_files)} —Ñ–∞–π–ª–æ–≤")
        print(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(self.failed_files)} —Ñ–∞–π–ª–æ–≤")
        print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files_list)}")
        
        if self.processed_files:
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
            total_records = sum(f['records_count'] for f in self.processed_files)
            total_days = sum(f['analysis_days'] for f in self.processed_files)
            print(f"   üìä –í—Å–µ–≥–æ M1 –∑–∞–ø–∏—Å–µ–π: {total_records:,}")
            print(f"   üìÖ –í—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π: {total_days:,}")
        
        if self.failed_files:
            print(f"\n‚ùå –§–ê–ô–õ–´ –° –û–®–ò–ë–ö–ê–ú–ò:")
            for failed in self.failed_files:
                print(f"   ‚Ä¢ {os.path.basename(failed['input_file'])}: {failed['error']}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        summary_path = self.create_summary_report()
        
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {os.path.abspath(self.results_dir)}")
        print(f"üéØ –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    print("=" * 80)
    print("üî¨ –°–ò–°–¢–ï–ú–ê –ú–ê–°–°–û–í–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–û–í")
    print("   –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ EUR/USD –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞—Ç—á-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    batch_analyzer = BatchLiquidityAnalyzer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    batch_analyzer.run_batch_analysis()
    
    print(f"\nüí° –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    print(f"   1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ CSV/XLSX —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É: {os.path.abspath('files')}")
    print(f"   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python batch_analyzer.py")
    print(f"   3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤ –ø–∞–ø–∫–µ: {os.path.abspath('results')}")


if __name__ == "__main__":
    main()
