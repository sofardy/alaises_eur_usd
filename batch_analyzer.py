#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ EUR/USD –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
–ê–≤—Ç–æ—Ä: GitHub Copilot
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import glob
import pandas as pd
from datetime import datetime
from liquidity_analyzer import LiquidityAnalyzer
import warnings

warnings.filterwarnings('ignore')


class BatchLiquidityAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö CSV —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, files_dir="files", results_dir="results"):
        self.files_dir = files_dir
        self.results_dir = results_dir
        self.analyzer = LiquidityAnalyzer()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        os.makedirs(self.files_dir, exist_ok=True)
        os.makedirs(self.results_dir, exist_ok=True)
    
    def find_csv_files(self):
        """–ù–∞–π—Ç–∏ –≤—Å–µ CSV —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ files"""
        csv_pattern = os.path.join(self.files_dir, "*.csv")
        csv_files = glob.glob(csv_pattern)
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º XLSX —Ñ–∞–π–ª—ã
        xlsx_pattern = os.path.join(self.files_dir, "*.xlsx")
        xlsx_files = glob.glob(xlsx_pattern)
        
        all_files = csv_files + xlsx_files
        return sorted(all_files)
    
    def extract_currency_pair(self, filename):
        """–ò–∑–≤–ª–µ—á—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        basename = os.path.basename(filename).upper()
        
        # –ò—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
        pairs = ['EURUSD', 'GBPUSD', 'USDJPY', 'USDCHF', 'AUDUSD', 'USDCAD', 'NZDUSD']
        for pair in pairs:
            if pair in basename:
                return pair
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        return basename.split('_')[2] if '_' in basename else 'UNKNOWN'
    
    def extract_period(self, filename):
        """–ò–∑–≤–ª–µ—á—å –ø–µ—Ä–∏–æ–¥ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        basename = os.path.basename(filename)
        
        # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMM
        import re
        date_match = re.search(r'(\d{6})', basename)
        if date_match:
            return date_match.group(1)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        date_match = re.search(r'(\d{4}\d{2})', basename)
        if date_match:
            return date_match.group(1)
        
        return datetime.now().strftime('%Y%m')
    
    def process_single_file(self, file_path):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}")
        print("-" * 50)
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = self.analyzer.load_data(file_path)
            
            if df is None or df.empty:
                print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª {file_path} –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è")
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            results = self.analyzer.analyze_period(df)
            
            if results.empty:
                print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {file_path}")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            currency_pair = self.extract_currency_pair(file_path)
            period = self.extract_period(file_path)
            
            output_filename = f"liquidity_analysis_{currency_pair}_{period}.xlsx"
            output_path = os.path.join(self.results_dir, output_filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.analyzer.save_results(results, output_path)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_filename}")
            
            return {
                'file': os.path.basename(file_path),
                'currency_pair': currency_pair,
                'period': period,
                'total_days': len(results),
                'output_file': output_filename,
                'status': 'success'
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {str(e)}")
            return {
                'file': os.path.basename(file_path),
                'status': 'error',
                'error': str(e)
            }
    
    def process_all_files(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ files"""
        print("üöÄ –ú–ê–°–°–û–í–´–ô –ê–ù–ê–õ–ò–ó –õ–ò–ö–í–ò–î–ù–û–°–¢–ò")
        print("=" * 50)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã
        files = self.find_csv_files()
        
        if not files:
            print(f"‚ùå –í –ø–∞–ø–∫–µ '{self.files_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ CSV/XLSX —Ñ–∞–π–ª–æ–≤!")
            print(f"üìÅ –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫—É '{self.files_dir}' –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(files)}")
        for i, file_path in enumerate(files, 1):
            print(f"  {i}. {os.path.basename(file_path)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        results_summary = []
        start_time = datetime.now()
        
        for i, file_path in enumerate(files, 1):
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{len(files)}")
            result = self.process_single_file(file_path)
            if result:
                results_summary.append(result)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        self.create_summary_report(results_summary, start_time)
        
        print(f"\n‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {self.results_dir}")
    
    def create_summary_report(self, results_summary, start_time):
        """–°–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º"""
        end_time = datetime.now()
        processing_time = end_time - start_time
        
        summary_data = []
        successful_files = 0
        failed_files = 0
        
        for result in results_summary:
            if result['status'] == 'success':
                successful_files += 1
                summary_data.append({
                    '–§–∞–π–ª': result['file'],
                    '–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞': result['currency_pair'],
                    '–ü–µ—Ä–∏–æ–¥': result['period'],
                    '–î–Ω–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ': result['total_days'],
                    '–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª': result['output_file'],
                    '–°—Ç–∞—Ç—É—Å': '–£—Å–ø–µ—à–Ω–æ'
                })
            else:
                failed_files += 1
                summary_data.append({
                    '–§–∞–π–ª': result['file'],
                    '–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞': '-',
                    '–ü–µ—Ä–∏–æ–¥': '-',
                    '–î–Ω–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ': 0,
                    '–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª': '-',
                    '–°—Ç–∞—Ç—É—Å': f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –æ—Ç—á–µ—Ç–æ–º
        summary_df = pd.DataFrame(summary_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_data = [
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': len(results_summary)},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', '–ó–Ω–∞—á–µ–Ω–∏–µ': successful_files},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–û—à–∏–±–æ–∫', '–ó–Ω–∞—á–µ–Ω–∏–µ': failed_files},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', '–ó–Ω–∞—á–µ–Ω–∏–µ': str(processing_time).split('.')[0]},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏', '–ó–Ω–∞—á–µ–Ω–∏–µ': start_time.strftime('%Y-%m-%d %H:%M:%S')},
            {'–ú–µ—Ç—Ä–∏–∫–∞': '–û–∫–æ–Ω—á–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏', '–ó–Ω–∞—á–µ–Ω–∏–µ': end_time.strftime('%Y-%m-%d %H:%M:%S')}
        ]
        stats_df = pd.DataFrame(stats_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        summary_file = os.path.join(self.results_dir, f"batch_analysis_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx")
        
        with pd.ExcelWriter(summary_file, engine='openpyxl') as writer:
            summary_df.to_excel(writer, sheet_name='–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã', index=False)
            stats_df.to_excel(writer, sheet_name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        print(f"\nüìä –û–ë–©–ò–ô –û–¢–ß–ï–¢:")
        print("-" * 30)
        print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(results_summary)}")
        print(f"–£—Å–ø–µ—à–Ω–æ: {successful_files}")
        print(f"–û—à–∏–±–æ–∫: {failed_files}")
        print(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time}")
        print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(summary_file)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    batch_analyzer = BatchLiquidityAnalyzer()
    batch_analyzer.process_all_files()


if __name__ == "__main__":
    main()
